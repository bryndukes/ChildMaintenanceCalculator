@using ChildMaintenanceCalculator.Models.ViewModels;
@using HtmlHelpers.BeginCollectionItemCore;
@using ExtensionMethods;

@model Step1ReceivingParent;

@{
    string htmlFieldPrefix;
}

    @{
        using (Html.BeginCollectionItem("Step1ReceivingParents"))
        {
            //TODO: Add null checking here
            htmlFieldPrefix = Html.ViewData.TemplateInfo.HtmlFieldPrefix;
            string receivingParentIndex = ViewData.ContainsKey("receivingParentIndex") ? ViewData["receivingParentIndex"].ToString() : "0";
            int receivingParentId = int.Parse(receivingParentIndex) + 1;
            string receivingParentHtmlId = $"ReceivingParent[{receivingParentIndex}]";

            <div id="@($"addReceivingParent{receivingParentId}")" class="add-receiving-parent-div form-block">
                
                @{
                    if (receivingParentId > 1)
                    {
                        <hr/>
                    }
                }
                
                <div>
                    <label class="receiving-parent-title">Receiving Parent @(receivingParentId)</label>
                    <input asp-for="Id" type="hidden" value="@receivingParentId" />
                </div>

                <div class="form-field">
                    <label class="form-label">What is the receiving parent's first name?</label>
                    <div>
                        <input asp-for="FirstName" />
                    </div>
                </div>

                <div id="@($"addChildrenList{receivingParentId}")">
                    @{
                        //If the parent partial has been created by ajax request, then the new childIndex will have been passed from the controller and should be used from here
                        //If the parent partial is for the first parent, then the child index is 0
                        int childIndex = ViewData["firstChildIndex"] != null ? (int)ViewData["firstChildIndex"] : 0;
                        foreach (Step1Child child in Model.Step1Children)
                        {
                            <div>
                                @Html.PartialFor(model => child, "_AddChildPartial")
                            </div>
                            childIndex++;
                        }
                    }
                </div>

                <input type="button" id="addChildButton" class="addChildButton form-add-button" value="Add Child" data-addchildbtnid="@receivingParentId" data-htmlfieldprefix="@htmlFieldPrefix" />
            </div>


        }
    }






